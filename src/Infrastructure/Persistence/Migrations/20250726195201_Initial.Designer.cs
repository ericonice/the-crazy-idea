// <auto-generated />
using System;
using Earthquakes.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Earthquakes.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250726195201_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Earthquakes.Domain.Earthquake", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Depth")
                        .HasColumnType("text")
                        .HasColumnName("depth");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("longitude");

                    b.Property<decimal>("Magnitude")
                        .HasColumnType("numeric")
                        .HasColumnName("magnitude");

                    b.Property<decimal?>("MagnitudeError")
                        .HasColumnType("numeric")
                        .HasColumnName("magnitude_error");

                    b.Property<string>("MagnitudeSource")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("magnitude_source");

                    b.Property<string>("MagnitudeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("magnitude_type");

                    b.Property<DateTimeOffset>("OccurredOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("place");

                    b.HasKey("Id")
                        .HasName("pk_earthquakes");

                    b.ToTable("earthquakes", (string)null);
                });

            modelBuilder.Entity("Earthquakes.Domain.EphemerisEntry", b =>
                {
                    b.Property<DateOnly>("Day")
                        .HasColumnType("date")
                        .HasColumnName("day");

                    b.Property<int>("CenterBody")
                        .HasColumnType("integer")
                        .HasColumnName("center_body");

                    b.Property<int>("TargetBody")
                        .HasColumnType("integer")
                        .HasColumnName("target_body");

                    b.Property<bool>("Minimum")
                        .HasColumnType("boolean")
                        .HasColumnName("minimum");

                    b.Property<bool>("OffsideMinimum")
                        .HasColumnType("boolean")
                        .HasColumnName("offside_minimum");

                    b.Property<bool>("OnsideMinimum")
                        .HasColumnType("boolean")
                        .HasColumnName("onside_minimum");

                    b.Property<decimal>("SotAngle")
                        .HasColumnType("numeric")
                        .HasColumnName("sot_angle");

                    b.Property<bool>("SotMinimum")
                        .HasColumnType("boolean")
                        .HasColumnName("sot_minimum");

                    b.Property<decimal>("StoAngle")
                        .HasColumnType("numeric")
                        .HasColumnName("sto_angle");

                    b.Property<bool>("StoMinimum")
                        .HasColumnType("boolean")
                        .HasColumnName("sto_minimum");

                    b.HasKey("Day", "CenterBody", "TargetBody")
                        .HasName("pk_ephemeris_entries");

                    b.HasIndex("CenterBody", "TargetBody", "Minimum")
                        .HasDatabaseName("ix_ephemeris_entries_center_body_target_body_minimum");

                    b.HasIndex("CenterBody", "TargetBody", "OffsideMinimum")
                        .HasDatabaseName("ix_ephemeris_entries_center_body_target_body_offside_minimum");

                    b.HasIndex("CenterBody", "TargetBody", "OnsideMinimum")
                        .HasDatabaseName("ix_ephemeris_entries_center_body_target_body_onside_minimum");

                    b.ToTable("ephemeris_entries", (string)null);
                });

            modelBuilder.Entity("Earthquakes.Domain.SunSpot", b =>
                {
                    b.Property<DateOnly>("Day")
                        .HasColumnType("date")
                        .HasColumnName("day");

                    b.Property<int>("NumberOfObservations")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_observations");

                    b.Property<int>("NumberOfSunSpots")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_sun_spots");

                    b.Property<bool>("Provisional")
                        .HasColumnType("boolean")
                        .HasColumnName("provisional");

                    b.Property<decimal>("StandardDeviation")
                        .HasColumnType("numeric")
                        .HasColumnName("standard_deviation");

                    b.HasKey("Day")
                        .HasName("pk_sun_spots");

                    b.ToTable("sun_spots", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
